Account Manager App: Web management akun.

yang harus digunakan:
1. Express.js (framework backend)
2. EJS (view engine)
3. PostgreSQL (database)
4. ORM menggunakan sequelize
bonus:
5. Bcrypt (enkripsi password)
6. JWT (buat system mock-login)


ISI DATABASE:
nama database:
tabel name: user
kolom2nya:
1. id {PK, unique}
2. firstName {string, not null}
3. lastName {string, not null?}
4. phoneNumber {Bigint, not null, unique}
5. position {string, (front-end,backend,designer,devOps)}
6.password {String}


CRUD Backend:
1.Create
  endpoint membuat akun dengan method POST (localhost:3000/user/createuser)
  respon:
  {
            status: 201,
            message: "User created",
            data: {data user yang dibuat}
        }

2. Read 
*getAll
  endpoint untuk mengambil seluruh data user yang ada di database dg method GET
  (localhost:3000/user/getall)
  respon:
  {
            status: 200,
            message: "fetch all user success"
            data: [{data1}, {data2}, {dataN}] (array of object)
            }
* getOne
        Buatlah endpoint untuk mengambil salah satu data User yang ada di database dengan method GET menggunakan params seperti "localhost:3000/user/getone/:id"
        Response:
            {
            status: 200,
            message: "fetch user success"
            data: {data user}
            }

3. Update
  endpoint untuk meng-update data dari suatu User menggunakan params dengan method PUT
  (localhost:3000/user/updateOne/:id)
  respon:
 {
            status: 200,
            message: "update success",
            data: {data user yang baru terupdate}
        }

4. Delete
  endpoint untuk men-delete User menggunakan params dengan method DELETE
  ("localhost:3000/user/deleteuser/:id")
  respon:
  
        {
            status: 200,
            message: "delete success"

        }

KETENTUAN TAMBAHAN:
1. Error handler
Buatlah error handler untuk melakukan pengecekan atas kelengkapan data yang dikirim pada request.
Jika data kurang lengkap, maka kirimkan response error seperti:
    {
        status: <error status code>,
        message: <error message>
    }
2.  Endpoint "localhost:3000/" digunakan untuk menampilkan file ejs, file ini akan berisi fitur-fitur untuk memanggil endpoint-endpoint diatas
3.    - Tampilkan response dari server di file ejs, desain maupun cara menampilkan nya bebas, buat yang rapih yaa



  



  

  

	
	 

